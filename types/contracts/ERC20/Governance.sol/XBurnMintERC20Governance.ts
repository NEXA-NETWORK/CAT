/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace XBurnMintERC20Structs {
  export type CrossChainPayloadStruct = {
    amount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<BytesLike>;
    tokenChain: PromiseOrValue<BigNumberish>;
    toAddress: PromiseOrValue<BytesLike>;
    toChain: PromiseOrValue<BigNumberish>;
  };

  export type CrossChainPayloadStructOutput = [
    BigNumber,
    string,
    number,
    string,
    number
  ] & {
    amount: BigNumber;
    tokenAddress: string;
    tokenChain: number;
    toAddress: string;
    toChain: number;
  };
}

export interface XBurnMintERC20GovernanceInterface extends utils.Interface {
  functions: {
    "addressToBytes(address)": FunctionFragment;
    "bytesToAddress(bytes32)": FunctionFragment;
    "chainId()": FunctionFragment;
    "decodeTransfer(bytes)": FunctionFragment;
    "encodeTransfer((uint256,bytes32,uint16,bytes32,uint16))": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "finality()": FunctionFragment;
    "isTransferCompleted(bytes32)": FunctionFragment;
    "nativeAsset()": FunctionFragment;
    "owner()": FunctionFragment;
    "parentChainIdEVM()": FunctionFragment;
    "registerChain(uint16,bytes32)": FunctionFragment;
    "registerChains(uint16[],bytes32[])": FunctionFragment;
    "registerNativeToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenContracts(uint16)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFinality(uint8)": FunctionFragment;
    "wormhole()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressToBytes"
      | "bytesToAddress"
      | "chainId"
      | "decodeTransfer"
      | "encodeTransfer"
      | "evmChainId"
      | "finality"
      | "isTransferCompleted"
      | "nativeAsset"
      | "owner"
      | "parentChainIdEVM"
      | "registerChain"
      | "registerChains"
      | "registerNativeToken"
      | "renounceOwnership"
      | "tokenContracts"
      | "transferOwnership"
      | "updateFinality"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressToBytes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeTransfer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransfer",
    values: [XBurnMintERC20Structs.CrossChainPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finality", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransferCompleted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentChainIdEVM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChains",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNativeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFinality",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressToBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finality", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentChainIdEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface XBurnMintERC20Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XBurnMintERC20GovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToBytes(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytesToAddress(
      b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    decodeTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [XBurnMintERC20Structs.CrossChainPayloadStructOutput] & {
        transfer: XBurnMintERC20Structs.CrossChainPayloadStructOutput;
      }
    >;

    encodeTransfer(
      transfer: XBurnMintERC20Structs.CrossChainPayloadStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    finality(overrides?: CallOverrides): Promise<[number]>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nativeAsset(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentChainIdEVM(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerChains(
      chainId: PromiseOrValue<BigNumberish>[],
      tokenContract: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNativeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFinality(
      finality: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;
  };

  addressToBytes(
    a: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  bytesToAddress(
    b: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  decodeTransfer(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<XBurnMintERC20Structs.CrossChainPayloadStructOutput>;

  encodeTransfer(
    transfer: XBurnMintERC20Structs.CrossChainPayloadStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  finality(overrides?: CallOverrides): Promise<number>;

  isTransferCompleted(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nativeAsset(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentChainIdEVM(overrides?: CallOverrides): Promise<BigNumber>;

  registerChain(
    chainId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerChains(
    chainId: PromiseOrValue<BigNumberish>[],
    tokenContract: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNativeToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenContracts(
    chainId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFinality(
    finality: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addressToBytes(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    bytesToAddress(
      b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    decodeTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<XBurnMintERC20Structs.CrossChainPayloadStructOutput>;

    encodeTransfer(
      transfer: XBurnMintERC20Structs.CrossChainPayloadStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    finality(overrides?: CallOverrides): Promise<number>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nativeAsset(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentChainIdEVM(overrides?: CallOverrides): Promise<BigNumber>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerChains(
      chainId: PromiseOrValue<BigNumberish>[],
      tokenContract: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerNativeToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFinality(
      finality: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wormhole(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addressToBytes(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytesToAddress(
      b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    decodeTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTransfer(
      transfer: XBurnMintERC20Structs.CrossChainPayloadStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    finality(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentChainIdEVM(overrides?: CallOverrides): Promise<BigNumber>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerChains(
      chainId: PromiseOrValue<BigNumberish>[],
      tokenContract: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNativeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFinality(
      finality: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToBytes(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytesToAddress(
      b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTransfer(
      transfer: XBurnMintERC20Structs.CrossChainPayloadStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finality(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentChainIdEVM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerChains(
      chainId: PromiseOrValue<BigNumberish>[],
      tokenContract: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNativeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFinality(
      finality: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
