/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface XBurnMintERC20EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "bridgeInEvent(uint256,uint256,uint256,bytes32)": EventFragment;
    "bridgeOutEvent(uint256,uint256,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "bridgeInEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bridgeOutEvent"): EventFragment;
}

export interface bridgeInEventEventObject {
  tokenAmount: BigNumber;
  fromChain: BigNumber;
  toChain: BigNumber;
  toAddress: string;
}
export type bridgeInEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  bridgeInEventEventObject
>;

export type bridgeInEventEventFilter = TypedEventFilter<bridgeInEventEvent>;

export interface bridgeOutEventEventObject {
  tokenAmount: BigNumber;
  fromChain: BigNumber;
  toChain: BigNumber;
  fromAddress: string;
  toAddress: string;
}
export type bridgeOutEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  bridgeOutEventEventObject
>;

export type bridgeOutEventEventFilter = TypedEventFilter<bridgeOutEventEvent>;

export interface XBurnMintERC20Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XBurnMintERC20EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "bridgeInEvent(uint256,uint256,uint256,bytes32)"(
      tokenAmount?: null,
      fromChain?: null,
      toChain?: null,
      toAddress?: PromiseOrValue<BytesLike> | null
    ): bridgeInEventEventFilter;
    bridgeInEvent(
      tokenAmount?: null,
      fromChain?: null,
      toChain?: null,
      toAddress?: PromiseOrValue<BytesLike> | null
    ): bridgeInEventEventFilter;

    "bridgeOutEvent(uint256,uint256,uint256,bytes32,bytes32)"(
      tokenAmount?: null,
      fromChain?: null,
      toChain?: null,
      fromAddress?: PromiseOrValue<BytesLike> | null,
      toAddress?: PromiseOrValue<BytesLike> | null
    ): bridgeOutEventEventFilter;
    bridgeOutEvent(
      tokenAmount?: null,
      fromChain?: null,
      toChain?: null,
      fromAddress?: PromiseOrValue<BytesLike> | null,
      toAddress?: PromiseOrValue<BytesLike> | null
    ): bridgeOutEventEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
